<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>杂记</title><link>https://AddWen.github.io/test.github.io</link><description>人生何处不青山</description><copyright>杂记</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/104900173?v=4&amp;size=64</url><title>avatar</title><link>https://AddWen.github.io/test.github.io</link></image><lastBuildDate>Fri, 18 Apr 2025 06:44:15 +0000</lastBuildDate><managingEditor>杂记</managingEditor><ttl>60</ttl><webMaster>杂记</webMaster><item><title>字符串常用操作</title><link>https://AddWen.github.io/test.github.io/post/zi-fu-chuan-chang-yong-cao-zuo.html</link><description># 字符串常用方法

1. 查找字符串位置

   

   `indexof()`:从前向后查找字符位置，从头开始返回索引值
   `lastIndexof()`:从后向前寻找,但也从头开始返回索引值
   未找到则返回`-1`

   ```javascript
   let str = '12345';
   console.log(str.indexOf('1'));     //'0'
   console.log(str.lastIndexOf('5')); //'4'
   console.log(str.indexOf(7));       //-1
   ```

   

    `includes()` 判断字符中是否包含指定的内容
    返回值：`true/false`

   ```javascript
   console.log(str.includes('1'));		//true
   console.log(str.includes('7'));		//false				
   ```

   

     `startsWith()`字符串是否以指定内容开头

     `endsWith()`字符串是否以指定内容结尾

     返回值：`true/false`

   ```javascript
   console.log(str.startsWith('1'));		//true
   console.log(str.endsWith('1'));			//false
   console.log(str.startsWith('12345'));	//true
   ```

   

   

2. 获取指定位置字符串

   ```javascript
    // charAt(index)/str[index]
         console.log(str.charAt('0'));		//'1'
         console.log(str[0]);				//'1'
   ```

   

3. 字符串截取

   

   `substring(开始索引,结束索引)`，包含开始**不包含结束**

   ```javascript
    console.log(str.substring(1, 3));	//'23'
   ```

   

   `slice()`与`substring()`基本一致，但前者能接收负数

   负数代表倒数第几个，**包括结束位置**，用的最多	

   ```javascript
   console.log(str.slice(1, -1)); 		//'234'
   ```

   

   `substr(开始索引,截取的长度)`

   ```javascript
   console.log(str.substr(0, 5)); 		//'12345'
   ```

   

   

4. 其他方法



合并字符串 `concat()`

```javascript
 let str2 = 'name';
 console.log(str.concat(str2));		//'12345name'
```



`split('分隔符')` 字符串转化为数组（重点！）

```javascript
 console.log(str.split(''));
 let str3 = 'a-e-i-o-u';
 console.log(str3.split('-'));
```



字符串替换 `replace('被替换的字串', '新字串');`

```javascript
console.log(str.replace('12', 'one'));		//'one345'
```



去除字符串**前后**的空白 `tirm()`

```javascript
let str4 = '    12  3   ';
console.log(str4.trim());		//'12  3'
```



转小写 `toLowerCase()`  转大写 `toUpperCase()`

```javascript
let str5 = 'aBcDe';
console.log(str5.toLowerCase());   	//'abcde'
console.log(str5.toUpperCase());	//'ABCDE'
```

。</description><guid isPermaLink="true">https://AddWen.github.io/test.github.io/post/zi-fu-chuan-chang-yong-cao-zuo.html</guid><pubDate>Fri, 18 Apr 2025 06:39:26 +0000</pubDate></item><item><title>JavaScript 基本语法与数据结构</title><link>https://AddWen.github.io/test.github.io/post/JavaScript%20-ji-ben-yu-fa-yu-shu-ju-jie-gou.html</link><description># js

1. 变量

   ```javascript
   let num=1 //ES6新增，var已经淘汰
   ```

   常量  一经定义就不可以被修改的数值型

   ```
   const MAX=10
   ```

2. 数据类型  可以用typeof()方法检验数据类型

   ```javascript
   console.log(typeof(MAX)); //number
   let name='张三'       //string 字符串
   let age=18            //number 数值类型
   let single=true       //false boolean 布尔类型
   let money=null        //用于清空变量内容，表示空
   let phone             //undefined 未定义类型
   ```

3. 运算符

   数学运算符(加减乘除 取余)

   ```javascript
   let num1 =1+2       //1+2=3
   let num2 =2-1       //2-1=1
   let nun3 =1*2       //1x2=2
   let num4 =1/2         //1÷2=0 js中除法默认采用向下取整 即保留商的整数部分
   let num5 =5%2        //1 取余相当于求两数相除后的余数5÷2=2余1
   ```

​	自增,自减

```javascript
let i=1 
console.log(i++);//1   区别：++i相当于先自增1后使用
console.log(++i);//2   i++相当于先使用后自增1  自减相似
```

​	逻辑运算符(与或非)

```javascript
// 与 &amp;&amp;    两侧可以为布尔值 只有两边都为真结果才为真
// 或 ||    两侧可以为布尔值 只有两边结果都为假才为假
// 非 ！    将原本的布尔值类型反过来  ！true = false
```

4. 分支

   ```javascript
   //if(boolean) boolean为true将会执行后面的第一条语句，否则不执行
   if(i===1){
       console.log('我会执行');   
   }
   else{
       console.log('我不会执行');
   }
   ```

5. 循环

   ```javascript
   // for循环
   // for(初始化语句;判断条件;控制条件)
   let sum1=0
   for(let i=1;i&lt;=MAX;i++)//求1-10累加和
   {
       sum1+=i//等价于sum=sum+i  -= *= /= 类似
   }
   console.log(sum1);
   
   // while循环
   // while(boolean) boolean为true将会执行后面的第一条语句，否则不执行
   let sum2=0
   while (i&lt;=MAX){
       sum2+=i
       i++
   }
   console.log(sum2);
   ```

6. 函数

   ```javascript
   // 函数调用之后才能执行，可通过函数名的方式调用 
   // () 内可以无参数，也可以传参数  函数名(参数1,参数2....)
   // 函数执行到 return 语句
   function getSum(a,b){
       let sum=a+b//a,b为局部变量，假设外部有同名变量，不会改变其值
       return sum
   }
   // 下列语句可以写成 console.log(getSum(1,1))
   let result=getSum(1,1)
   console.log(result);
   ```

7. 数组

   ```javascript
   // 数组对象的作用是：使用单独的变量名来存储一系列的值，这些值必须是同一数据类型
   let numArray=[1,2,3,4,5]//可以直接赋值
   numArray.push(6)// 数组末尾添加新元素
   numArray.pop()// 删除数组末尾最后一个元素
   numArray.shift()// 删除数组开头第一个元素
   numArray.unshift(1)// 数组开头添加新元素
   console.log(numArray);
   
   let myFriends = [];//[]内可以加上数字表示数组长度，不加则表示空数组
   	myFriends[0] = '李四';
   	myFriends[1] = '王五';
   	myFriends[2] = '赵六';
   // 数组的遍历
   // 最基本的输出方式  
   for (let i=0;i&lt;myFriends.length;i++){//数组名.length() 可自动获取数组长度
       console.log(myFriends[i],i)  
   }
   //这种方法更简洁
   myFriends.forEach(function(value,index){
       console.log(value,index);
       
   })
   ```

8. 对象 对象是拥有属性和方法的数据

   ```javascript
   let student={
       name:'赵六',
       age:18,
       single:true
   }
   console.log(student);
   // 对象的遍历
   for(let k in student){
       console.log(k,student[k]);
       
   }
   ```

9. 对象数组 object

   ```javascript
   let students=[
       {
           name:'张三',
           age:18,
           single:true
       },
       {
           name:'李四',
           age:19,
           single:false
       },
       {
           name:'王五',
           age:17,
           single:true
       }
   ]
   // 对象数组也可以使用pop(),push()等方法往里面添加对象
   students.push(student)
   console.log(students);
   ```

   。</description><guid isPermaLink="true">https://AddWen.github.io/test.github.io/post/JavaScript%20-ji-ben-yu-fa-yu-shu-ju-jie-gou.html</guid><pubDate>Fri, 18 Apr 2025 06:38:09 +0000</pubDate></item><item><title>01</title><link>https://AddWen.github.io/test.github.io/post/01.html</link><description>1111。</description><guid isPermaLink="true">https://AddWen.github.io/test.github.io/post/01.html</guid><pubDate>Fri, 18 Apr 2025 05:43:30 +0000</pubDate></item></channel></rss>